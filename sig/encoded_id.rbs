module EncodedId
  VERSION: ::String

  EncodedIdFormatError: ::ArgumentError
  InvalidAlphabetError: ::ArgumentError

  class ReversibleId
    ALPHABET: ::String

    def initialize: (salt: ::String, ?length: ::Integer, ?split_at: ::Integer, ?alphabet: untyped) -> void

    # Encode the input values into a hash
    def encode: (Array[::Integer | ::String] values) -> untyped

    # Decode the hash to original array
    def decode: ((::Integer | ::String) str) -> untyped

    private

    @uid_generator: ::Hashids
    @split_regex: ::Regexp

    attr_reader salt: ::String

    attr_reader length: ::Integer

    attr_reader human_friendly_alphabet: ::String

    attr_reader split_at: ::Integer | nil

    def prepare_input: (untyped value) -> untyped

    def uid_generator: () -> untyped

    def convert_to_string: (untyped hash) -> untyped

    def split_regex: () -> untyped

    def humanize_length: (untyped hash) -> untyped

    def convert_to_hash: (untyped str) -> untyped

    def map_crockford_set: (untyped str) -> untyped
  end
end
