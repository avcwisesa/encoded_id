module EncodedId
  VERSION: ::String

  EncodedIdFormatError: ::ArgumentError
  InvalidAlphabetError: ::ArgumentError
  InvalidInputError: ::ArgumentError

  class ReversibleId
    ALPHABET: ::String

    def initialize: (salt: ::String, ?length: ::Integer, ?split_at: ::Integer, ?alphabet: untyped) -> void

    # Encode the input values into a hash
    def encode: (untyped values) -> ::String

    # Decode the hash to original array
    def decode: (::String str) -> Array[::Integer]

    private

    @encoded_id_generator: ::Hashids
    @split_regex: ::Regexp

    attr_reader salt: ::String

    attr_reader length: ::Integer

    attr_reader human_friendly_alphabet: ::String

    attr_reader split_at: ::Integer | nil

    def prepare_input: (untyped value) -> ::Array[::Integer]

    def encoded_id_generator: () -> ::Hashids

    def split_regex: () -> ::Regexp

    def humanize_length: (::String hash) -> ::String

    def convert_to_hash: (::String str) -> ::String

    def map_crockford_set: (::String str) -> ::String
  end
end
