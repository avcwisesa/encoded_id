module EncodedId
  EncodedIdFormatError: ::ArgumentError
  InvalidAlphabetError: ::ArgumentError
  InvalidInputError: ::ArgumentError

  class ReversibleId
    ALPHABET: ::String
    CHARACTER_EQUIVALENCES: ::Hash[::String, ::String]

    def initialize: (salt: ::String, ?length: ::Integer, ?split_at: ::Integer, ?split_with: ::String, ?alphabet: ::String, ?character_equivalences: ::Hash[::String, ::String], ?hex_digit_encoding_group_size: ::Integer) -> void

    # Encode the input values into a hash
    def encode: (untyped values) -> ::String

    # Encode hex strings into a hash
    def encode_hex: (untyped hexs) -> ::String

    # Decode the hash to original array
    def decode: (::String str) -> ::Array[::Integer]

    # Decode hex strings from a hash
    def decode_hex: (::String str) -> ::Array[::String]

    private

    @encoded_id_generator: ::Hashids
    @split_regex: ::Regexp
    @hex_string_separator: ::Integer

    attr_reader salt: ::String

    attr_reader length: ::Integer

    attr_reader human_friendly_alphabet: ::String

    attr_reader split_at: ::Integer | nil
    attr_reader split_with: ::String

    attr_reader character_equivalences: ::Hash[::String, ::String]

    attr_reader hex_digit_encoding_group_size: ::Integer

    def prepare_input: (untyped value) -> ::Array[::Integer]

    def encoded_id_generator: () -> ::Hashids

    def split_regex: () -> ::Regexp

    def humanize_length: (::String hash) -> ::String

    def convert_to_hash: (::String str) -> ::String

    def map_equivalent_characters: (::String str) -> ::String

    def integer_representation: (untyped hexs) -> ::Array[::Integer]

    def integers_to_hex_strings: (::Array[::Integer] integers) -> ::Array[::String]

    def hex_string_separator: () -> ::Integer
  end
end
